package org.entirej;import java.sql.Array;import java.sql.CallableStatement;import java.sql.Connection;import java.sql.SQLData;import java.sql.SQLException;import java.sql.Struct;import java.sql.Types;import java.util.ArrayList;import java.util.List;import oracle.sql.ARRAY;import oracle.sql.ArrayDescriptor;import org.entirej.framework.report.EJReport;import org.entirej.framework.report.EJReportMessage;import org.entirej.framework.report.EJReportRuntimeException;import org.entirej.framework.report.interfaces.EJReportFrameworkConnection;import org.entirej.framework.report.service.EJReportStatementExecutor;import org.entirej.framework.report.service.EJReportStatementParameter;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class OracleReportStatementExecutor extends EJReportStatementExecutor{    private static Logger                logger                  = LoggerFactory.getLogger(OracleReportStatementExecutor.class);    static final ThreadLocal<Connection> CONNECTION_THREAD_LOCAL = new ThreadLocal<Connection>();    public int executePLSQLStoredProcedure(EJReport report, String procedureStatement, EJReportStatementParameter... parameters)    {        if (report == null)        {            throw new NullPointerException("Report passed to executeStoredProcedure cannot be null");        }        return executePLSQLStoredProcedure(report.getConnection(), procedureStatement, parameters);    }    public int executePLSQLStoredProcedure(EJReportFrameworkConnection fwkConnection, String procedureStatement, EJReportStatementParameter... parameters)    {    	    	         long start = System.currentTimeMillis();    	        logger.debug("START executePLSQLStoredProcedure");        logger.debug(procedureStatement);        if (fwkConnection == null)        {            throw new NullPointerException("No EJFrameworkConnection passed to OracleStatementExecutor.executeStoredProcedure");        }        CallableStatement proc = null;        try        {            logger.debug("     Getting connection object");                        Object obj = fwkConnection.getConnectionObject();                        logger.debug("     Got connection object obj: "+obj);            if (fwkConnection.getConnectionObject() == null || !(fwkConnection.getConnectionObject() instanceof Connection))            {                throw new EJReportRuntimeException(new EJReportMessage(                        "The StatementExecutor requires the ConnectionFactory to return a JDBC Connection but another type was returned"));            }            logger.debug("     Getting connection");            Connection connection = (Connection) fwkConnection.getConnectionObject();            logger.debug("     Got connection");            CONNECTION_THREAD_LOCAL.set(connection);            logger.debug("     Preparing Call");            proc = connection.prepareCall(procedureStatement);            logger.debug("     Call Prepared");            int pos = 0;            logger.debug("     Setting Parameters");            for (EJReportStatementParameter parameter : parameters)            {                pos++;                switch (parameter.getParameterType())                {                    case IN:                        if (parameter.getValue() == null)                        {                            proc.setNull(pos, parameter.getJdbcType());                        }                        else                        {                            proc.setObject(pos, parameter.getValue());                        }                        break;                    case INOUT:                        parameter.setPosition(pos);                        if (parameter instanceof EJReportStatementParameterArray)                        {                            proc.setArray(pos, createArray((EJReportStatementParameterArray<?>) parameter));                        }                        else                        {                            if (parameter.getValue() == null)                            {                                proc.setNull(pos, parameter.getJdbcType());                            }                            else                            {                                proc.setObject(pos, parameter.getValue());                            }                        }                        if (parameter.getJdbcType() == Types.ARRAY)                        {                            proc.registerOutParameter(pos, Types.ARRAY, ((EJReportStatementParameterArray<?>) parameter).getArrayTypeName());                        }                        else if (parameter.getJdbcType() == Types.STRUCT)                        {                            proc.registerOutParameter(pos, Types.STRUCT, ((EJReportStatementParameterStruct<?>) parameter).getStructTypeName());                        }                        else                        {                            proc.registerOutParameter(pos, parameter.getJdbcType());                        }                        break;                    case OUT:                    case RETURN:                        if (parameter.getJdbcType() == Types.ARRAY)                        {                            createArray((EJReportStatementParameterArray<?>) parameter);                            proc.registerOutParameter(pos, Types.ARRAY, ((EJReportStatementParameterArray<?>) parameter).getArrayTypeName());                        }                        else if (parameter.getJdbcType() == Types.STRUCT)                        {                            proc.registerOutParameter(pos, Types.STRUCT, ((EJReportStatementParameterStruct<?>) parameter).getStructTypeName());                        }                        else                        {                            proc.registerOutParameter(pos, parameter.getJdbcType());                        }                        parameter.setPosition(pos);                        break;                }            }            logger.debug("     Parameters Set. Executing...");            proc.execute();            logger.debug("     Execution Completed, Extracting Values..."+ " TIME(sec):" + (System.currentTimeMillis() - start) / 1000);            start = System.currentTimeMillis();            for (EJReportStatementParameter parameter : parameters)            {                switch (parameter.getParameterType())                {                    case INOUT:                    case OUT:                    case RETURN:                        extractValue(proc, parameter.getPosition(), parameter);                        break;                    case IN:                        break;                }            }            logger.debug("     Values Extracted"+ " TIME(sec):" + (System.currentTimeMillis() - start) / 1000);        }        catch (Exception e)        {            try            {                                proc.close();                fwkConnection.rollback();            }            catch (SQLException e2)            {            }            throw new EJReportRuntimeException(e.getMessage(), e);        }        finally        {            try            {                proc.close();                fwkConnection.close();            }            catch (SQLException e)            {            }        }        logger.debug("END executePLSQLStoredProcedure");        return 0;    }    private void extractValue(CallableStatement cstmt, int pos, EJReportStatementParameter parameter) throws SQLException, InstantiationException,            IllegalAccessException    {        if (parameter instanceof EJReportStatementParameterArray)        {            Array arrayValue = cstmt.getArray(pos);            extractArrayValue(arrayValue, (EJReportStatementParameterArray<?>) parameter);        }        else if (parameter instanceof EJReportStatementParameterStruct)        {            Struct structValue = (Struct) cstmt.getObject(pos);            extractStructValue(structValue, (EJReportStatementParameterStruct<?>) parameter);        }        else        {            parameter.setValue(cstmt.getObject(pos));        }    }    @SuppressWarnings("unchecked")    public synchronized static <E> void extractArrayValue(Array arrayValue, EJReportStatementParameterArray<?> parameter)    {        logger.debug("START  extractArrayValue");        try        {            logger.debug("START  Creating value Array");            List<E> valueArray = new ArrayList<E>();            logger.debug("START  creating Datum Array");            Object[] datumArray = (arrayValue != null) ? (Object[]) arrayValue.getArray() : null;            logger.debug("DONE  Datum Array Created");            logger.debug("START  extracting resultset");            /*             * System.out.println("START  extracting resultset"); if (arrayValue !=             * null) { ResultSet rset = arrayValue.getResultSet(); while             * (rset.next()) { Object obj = rset.getObject(2); if (obj != null)             * { System.out.println("          -> Getting Struct"); Struct str =             * (Struct) obj; System.out.println("          -> Got Struct");             * System.out.println("          -> Creating SQLData"); SQLData data =             * (SQLData) parameter.getClassInstance().newInstance();             * System.out.println("          -> SQLData Created");             * System.out.println("          -> Creating EJSQLInput"); EJSQLInput inp             * = new EJSQLInput(str);             * System.out.println("          -> Created EJSQLInput");             *              * System.out.println("          -> Reading.... {}",             * parameter.getArrayTypeName()); data.readSQL(inp,             * data.getSQLTypeName()); System.out.println("          -> All read");             * System.out.println("          -> adding to array"); valueArray.add((E)             * data); } else { valueArray.add(null); } } }             * System.out.println("DONE   extracting resultset");             */            if (datumArray != null)            {                for (Object element : datumArray)                {                    if (element != null)                    {                        SQLData data = (SQLData) parameter.getClassInstance().newInstance();                        data.readSQL(new EJSQLInput((Struct) element), data.getSQLTypeName());                        valueArray.add((E) data);                    }                    else                    {                        valueArray.add(null);                    }                }            }            logger.debug("END  extracting resultset");                        parameter.setValue(valueArray);            logger.debug("END   extractArrayValue");        }        catch (InstantiationException e)        {            throw new RuntimeException(e);        }        catch (IllegalAccessException e)        {            throw new RuntimeException(e);        }        catch (SQLException e)        {            throw new RuntimeException(e);        }    }    @SuppressWarnings("unchecked")    public synchronized static <E> void extractStructValue(Struct structValue, EJReportStatementParameterStruct<?> parameter)    {        try        {            if (structValue != null)            {                SQLData data = (SQLData) parameter.getClassInstance().newInstance();                data.readSQL(new EJSQLInput(structValue), data.getSQLTypeName());                parameter.setValue((E) data);            }            else            {                parameter.setValue(null);            }        }        catch (InstantiationException e)        {            throw new RuntimeException(e);        }        catch (IllegalAccessException e)        {            throw new RuntimeException(e);        }        catch (SQLException e)        {            throw new RuntimeException(e);        }    }    public static Array createArray(EJReportStatementParameterArray<?> parameter)    {        try        {            Connection connection = CONNECTION_THREAD_LOCAL.get();            if (connection == null)            {                throw new IllegalStateException();            }            ArrayDescriptor arraydescriptor = ArrayDescriptor.createDescriptor(((EJReportStatementParameterArray<?>) parameter).getArrayTypeName(), connection);            Array aArray = new ARRAY(arraydescriptor, arraydescriptor.getInternalConnection(), ((EJReportStatementParameterArray<?>) parameter).getArray());            return aArray;        }        catch (SQLException e)        {            e.printStackTrace();            throw new RuntimeException(e);        }    }}