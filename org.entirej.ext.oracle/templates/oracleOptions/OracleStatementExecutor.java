package org.entirej;import java.sql.Array;import java.sql.CallableStatement;import java.sql.Connection;import java.sql.SQLData;import java.sql.SQLException;import java.sql.Struct;import java.sql.Types;import java.util.ArrayList;import java.util.List;import oracle.sql.ARRAY;import oracle.sql.ArrayDescriptor;import org.entirej.framework.core.EJApplicationException;import org.entirej.framework.core.EJForm;import org.entirej.framework.core.EJMessage;import org.entirej.framework.core.interfaces.EJFrameworkConnection;import org.entirej.framework.core.service.EJStatementExecutor;import org.entirej.framework.core.service.EJStatementParameter;public class OracleStatementExecutor extends EJStatementExecutor{    private static final ThreadLocal<Connection> CONNECTION_THREAD_LOCAL = new ThreadLocal<Connection>();    public int executePLSQLStoredProcedure(EJForm form, String procedureStatement, String collectionTypeName, EJStatementParameter... parameters)    {        if (form == null)        {            throw new NullPointerException("Form passed to executeStoredProcedure cannot be null");        }        return executePLSQLStoredProcedure(form.getConnection(), procedureStatement, collectionTypeName, parameters);    }    public int executePLSQLStoredProcedure(EJFrameworkConnection fwkConnection, String procedureStatement, String collectionTypeName, EJStatementParameter... parameters)    {        if (fwkConnection == null)        {            throw new NullPointerException("No EJFrameworkConnection passed to OracleStatementExecutor.executeStoredProcedure");        }        CallableStatement proc = null;        try        {            if (fwkConnection.getConnectionObject() == null || !(fwkConnection.getConnectionObject() instanceof Connection))            {                throw new EJApplicationException(new EJMessage(                        "The StatementExecutor requires the ConnectionFactory to return a JDBC Connection but another type was returned"));            }            Connection connection = (Connection) fwkConnection.getConnectionObject();            CONNECTION_THREAD_LOCAL.set(connection);            proc = connection.prepareCall(procedureStatement);            int pos = 0;            for (EJStatementParameter parameter : parameters)            {                pos++;                switch (parameter.getParameterType())                {                    case IN:                        if (parameter.getValue() == null)                        {                            proc.setNull(pos, parameter.getJdbcType());                        }                        else                        {                            proc.setObject(pos, parameter.getValue());                        }                        break;                    case INOUT:                        parameter.setPosition(pos);                        if (parameter instanceof EJStatementParameterArray)                        {                            proc.setArray(pos, createArray(collectionTypeName, (EJStatementParameterArray<?>) parameter));                        }                        else                        {                            if (parameter.getValue() == null)                            {                                proc.setNull(pos, parameter.getJdbcType());                            }                            else                            {                                proc.setObject(pos, parameter.getValue());                            }                        }                        if (parameter.getJdbcType() == Types.ARRAY)                        {                            proc.registerOutParameter(pos, Types.ARRAY, collectionTypeName);                        }                        else                        {                            proc.registerOutParameter(pos, parameter.getJdbcType());                        }                        break;                    case OUT:                    case RETURN:                        if (parameter.getJdbcType() == Types.ARRAY)                        {                            proc.registerOutParameter(pos, Types.ARRAY, collectionTypeName);                        }                        else                        {                            proc.registerOutParameter(pos, parameter.getJdbcType());                        }                        parameter.setPosition(pos);                        break;                }            }            proc.execute();            for (EJStatementParameter parameter : parameters)            {                switch (parameter.getParameterType())                {                    case INOUT:                    case OUT:                    case RETURN:                        extractValue(proc, parameter.getPosition(), parameter);                        break;                }            }        }        catch (Exception e)        {            e.printStackTrace();            try            {                proc.close();                fwkConnection.rollback();            }            catch (SQLException e2)            {            }        }        finally        {            try            {                proc.close();                fwkConnection.close();            }            catch (SQLException e)            {            }        }        return 0;    }    private void extractValue(CallableStatement cstmt, int pos, EJStatementParameter parameter) throws SQLException, InstantiationException,            IllegalAccessException    {        if (parameter instanceof EJStatementParameterArray)        {            Array arrayValue = cstmt.getArray(pos);            extractArrayValue(arrayValue, (EJStatementParameterArray<?>) parameter);        }        else        {            parameter.setValue(cstmt.getObject(pos));        }    }    @SuppressWarnings("unchecked")    public static <E> void extractArrayValue(Array arrayValue, EJStatementParameterArray<?> parameter)    {        try        {            List<E> valueArray = new ArrayList<E>();            Object[] datumArray = (arrayValue != null) ? (Object[]) arrayValue.getArray() : null;            if (datumArray != null)            {                for (Object element : datumArray)                {                    if (element != null)                    {                        SQLData data = (SQLData) parameter.getClassInstance().newInstance();                        data.readSQL(new EJSQLInput((Struct) element), data.getSQLTypeName());                        valueArray.add((E) data);                    }                    else                    {                        valueArray.add(null);                    }                }            }            parameter.setValue(valueArray);        }        catch (InstantiationException e)        {            throw new RuntimeException(e);        }        catch (IllegalAccessException e)        {            throw new RuntimeException(e);        }        catch (SQLException e)        {            throw new RuntimeException(e);        }    }    public static Array createArray(String collectionTypeName, EJStatementParameterArray<?> parameter)    {        try        {            Connection connection = CONNECTION_THREAD_LOCAL.get();            if (connection == null)                throw new IllegalStateException();            ArrayDescriptor arraydescriptor = ArrayDescriptor.createDescriptor(collectionTypeName, connection);            Array aArray = new ARRAY(arraydescriptor, arraydescriptor.getInternalConnection(), ((EJStatementParameterArray<?>) parameter).getArray());            return aArray;        }        catch (SQLException e)        {            e.printStackTrace();            throw new RuntimeException(e);        }    }}